// src/index.ts
import path from "path";
import deepmerge from "deepmerge";
import execa from "execa";
import chalk from "chalk";
import dotenv from "dotenv";
var laravel = () => ({
  name: "vite:laravel",
  handleHotUpdate({file, server}) {
    if (file.endsWith(".blade.php")) {
      server.ws.send({
        type: "full-reload",
        path: "*"
      });
    }
  }
});
var ViteConfiguration = class {
  constructor(config = {}, artisan = {}) {
    var _a, _b, _c;
    dotenv.config();
    this.base = (_a = process.env.ASSET_URL) != null ? _a : "";
    if (!this.base.endsWith("/"))
      this.base += "/";
    if (("development" == null ? void 0 : "development".startsWith("prod")) || process.env.APP_ENV !== "local") {
      this.base += (_b = artisan.build_path) != null ? _b : "";
      if (!this.base.endsWith("/"))
        this.base += "/";
    }
    this.publicDir = (_c = artisan.public_directory) != null ? _c : "resources/static";
    this.build = {
      manifest: true,
      outDir: (artisan == null ? void 0 : artisan.build_path) ? `public/${artisan.build_path}` : "public/build",
      rollupOptions: {
        input: []
      }
    };
    this.plugins = [
      laravel()
    ];
    if (artisan == null ? void 0 : artisan.aliases) {
      this.resolve = {
        alias: Object.fromEntries(Object.entries(artisan.aliases).map(([alias, directory]) => {
          return [alias, path.join(process.cwd(), directory)];
        }))
      };
      generateAliases();
    }
    if (artisan == null ? void 0 : artisan.dev_url) {
      const [protocol, host, port] = artisan.dev_url.split(":");
      this.server = {
        host: host.substr(2),
        https: protocol === "https",
        port: port ? Number(port) : 3e3
      };
    }
    if (artisan == null ? void 0 : artisan.entrypoints)
      this.build.rollupOptions.input.push(...artisan.entrypoints);
    this.merge(config);
  }
  withStaticAssets(publicDir) {
    this.publicDir = publicDir;
    return this;
  }
  withOutput(outDir) {
    this.build.outDir = outDir;
    return this;
  }
  withEntry(...entries) {
    this.build.rollupOptions.input = [
      ...this.build.rollupOptions.input,
      ...entries
    ];
    return this;
  }
  withEntries(...entries) {
    return this.withEntry(...entries);
  }
  withPlugin(plugin) {
    if (typeof plugin === "function")
      plugin = plugin();
    this.plugins.push(plugin);
    return this;
  }
  withPlugins(...plugins) {
    plugins.forEach((plugin) => this.withPlugin(plugin));
    return this;
  }
  merge(config) {
    const result = deepmerge(this, config);
    if (Reflect.has(config, "base"))
      console.warn(chalk.yellow.bold('(!) "base" option should not be used with Laravel Vite. Use the "ASSET_URL" environment variable instead.'));
    for (const [key, value] of Object.entries(result)) {
      this[key] = value;
    }
    return this;
  }
};
function callArtisan(...params) {
  var _a;
  return (_a = execa.sync("php", ["artisan", ...params])) == null ? void 0 : _a.stdout;
}
function generateAliases() {
  try {
    callArtisan("vite:aliases");
  } catch (error) {
    console.warn("Could not regenerate tsconfig.json.");
    console.error(error);
  }
}
function getConfigurationFromArtisan() {
  try {
    return JSON.parse(callArtisan("vite:config"));
  } catch (error) {
    console.warn("Could not read configuration from PHP.");
    console.error(error);
  }
}
function createViteConfiguration() {
  return defineConfig();
}
function defineConfig(config = {}) {
  const artisan = getConfigurationFromArtisan();
  return new ViteConfiguration(config, artisan);
}
var src_default = defineConfig();
export {
  ViteConfiguration,
  createViteConfiguration,
  src_default as default,
  defineConfig,
  laravel
};
